#! /usr/local/bin/node
const net = require('net');

const Twitter = require('twitter');
const config = require('./config.js');

const T = new Twitter(config);
const server = net.createServer(async (socket) => {
    socket.write(msg);
    try {
        const twets = await recent_tweets();
        socket.write(twets);
    } catch (e){
        console.error(e);
    }
    socket.end();
});

const msg = new Buffer('ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOTlYICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlHICAgQEBAICAgR2k7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkBARyAgQEBAICBAQEA5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBAQDsgQEBAIGlAQEcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAQEA6QkBHLEBAQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6QEBAQkJCQEBAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLEBCQkJCQEAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgNU01MjUyNTI1MjUyNTNpckBCQkJCQkJyaTMyMjUyNTI1MjUyNTlpICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgQEBAQEBAQEBAQEBAQEBAQEJCQkJCQkJAQEBAQEBAQEBAQEBAQEBAICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA6QEJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkBAICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICByQEJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJAOiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA5QEJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJAciAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBAQEJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJARyAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBAQEJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJAQCAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIDpAQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJAQCAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIGlAQkJCQkJCQkBAQEBAQkJCQkJCQkJCQkJCQkJAQEBAQEJCQkJCQkJCQCwgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIDlAQkJCQkJCQEJycnJHQEBCQkJCQkJCQkJCQkBCaXJyTUBAQkJCQkJCQGkgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIEBAQkJCQkJAciAgICAgO0BCQkJCQkJCQkJCQDUgICAgICBAQkJCQkJCQEcgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIEBAQkJCQkJAOyAgICAgOkBCQkJCQkJCQkJCQDMgICAgICBAQEJCQkJCQEAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgOkBCQkJCQkJCQFg7OjsyQEJCQkJAQEBAQkJCQkBHcjosaUBAQkJCQkJCQEAgICAgICAgICAgICAgICAgICAKIDogICAgICAgICAgICAgICAgaUBCQkJCQkJCQkBAQEBAQEJAQEBATTNAQEBAQkBAQEBAQEBCQkJCQkJCQkA7ICAgICAgICAgICAgICAgICAKIDNAQEBAQEBAQEBAQEBAQEBAQEJCQkJCQkJCQkJCQkJCQEBAQnIgICAgLEdAQEBAQkJCQkJCQkJCQkJCQkBAQEBAQEBAQEBAQEBAQEBAQHIKICA6QEBAQEBAQEBAQEBAQEBAQEJCQkJCQkJCQkJCQkJAR3IgICAgICAgICAgO1hCQkJCQkJCQkJCQkJCQkJAQEBAQEBAR0BAQEBAQEBCOiAKICAgIHJAQEBCQkI7IDosOzozQEJCQkJCQkJCQkJCQkJAciAgIDVCQEdCQmkgICBCQkJCQkJCQkJCQkJCQkJAOiAgICAgckBCQkBAQHIgICAKICAgICAgQkBAQkBCICAgICBpQEJCQkJCQkJCQkJCQkJCQEBHLCA6OUBNOywzQEBCQkJCQkJCQkJCQkJCQkJAciAgICBCQEBCQEA5ICAgICAKICAgICAgIHJAQEBAQEcgICBCQEJCQkJCQkJCQkJCQkJCQkBAQEByICA7OUBAQEJCQkJCQkJCQkJCQkJCQkJAOSAgNUBAQEBAQCwgICAgICAKICAgICAgICAgOUBAQEBAOyBAQEJCQkJCQkJCQkJCQkJCQkJCQkBAQEBAQEJCQkJCQkJCQkJCQkJCQkJCQkJAQjpAQEBAQEAyICAgICAgICAKICAgICAgICAgICxAQEBAQEJAQkJCQkJCQkJCQkJCQkJCQkJCQkJCQEJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQEBAQkBAQCAgICAgICAgICAKICAgICAgICAgICAgNUBAQEBCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJAQEBpICAgICAgICAgICAKICAgICAgICAgICAgIDpAQEBCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkBAQiAgICAgICAgICAgICAKICAgICAgICAgICAgICAgckBCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQEByICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIEdAQkJCQkJCQkJCQEBAQEJCQkJCQkJCQkJCQkJCQkJCQkBAQEBAQkJCQkJCQkJCQGkgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIEBAQkJCQEBAQEBAR0JHQkBAQEBAQkJCQkJCQkJAQEBAQEJCQkJCQEBAQEBCQkJCQEIgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgOkBAQkJCR3I6O0BCICAgO0A5IDtpQEJCQkJCQkA5ciByQEcgICBpQDUgOzNAQkJCQEAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgckBCQkJAQiAgIDlAICAgM0AgICByQEJCQkJCQkBHICAgQEAgICA5QCAgIGlAQkJCQkAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgTUBCQkJCQEcgICBCICAgNXIgICxAQkJCQkJCQkJAOSAgIEIgICBHOiAgckBAQkJCQkByICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgQkBCQkJCQkBpICAgICAgICAgIEBAQkJCQkJCQkJAQHIgICAgICAgICA6QEBCQkJCQkBYICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgQEBCQkJCQkBALCAgICAgICAgQEBCQkJCQkJCQkJCQEA6ICAgICAgICBAQEJCQkJCQkBAICAgICAgICAgICAgICAKICAgICAgICAgICAgICA6QEBCQkJCQkJAQCAgICAgICA5QEJCQkJCQkJCQkJCQkBAICAgICAgIEdAQkJCQkJCQkBAICAgICAgICAgICAgICAKICAgICAgICAgICAgICByQEJCR0JHQkdCQEBAQEBAQEBAQkdCR0JHQkdHR0JHQkJAQEBAQEBAQEBCQkdHR0JHQkJAICAgICAgICAgICAgICAKCQkJICAKICAgICAgICAgIFRoaXMgaXMgY3Nva2F2YXIuaHUgRW5jc+kncyBob21lIG9uIHRoZSB3ZWIuIEhhcHB5IHN1cmZpbmcuCgkJICAKCQkgICAgICAgICAgICAgICAgY29udGFjdDogZW5jc2VAY3Nva2F2YXIuaHUKCg==', 'base64').toString('binary');
server.listen(79);

async function recent_tweets() {
    return new Promise((resolve, reject) => {
        var params = {
            q: '#nodejs',
            count: 10,
            result_type: 'recent',
            screen_name: 'encse',
            lang: 'en'
        }

        T.get('statuses/user_timeline', params, (err, data, response) => {
            if (!err) {
                let res = '';
                for(let tweet of data){
                    res += `${tweet.created_at}\n`;
                    res += `${tweet.text}\n`;
                    res += `\n`;
                }
                resolve(res);
            } else {
                reject(err);
            }
        });
    });
}


